package models

import (
	"fmt"
	"time"

	"github.com/MarketDataApp/sdk-go/helpers/dates"
)

// OptionsExpirationsResponse encapsulates the expiration dates of options and the last update timestamp.
//
// # Generated By
//
//   - OptionsExpirationsRequest.Packed(): Generates an OptionsExpirationsResponse after fetching data from Market Data.
//
// # Methods
//
//   - IsValid() bool: Checks if the expiration dates are valid and correctly formatted.
//   - String() string: Returns a string representation of the OptionsExpirationsResponse.
//   - Unpack() ([]time.Time, error): Converts expiration date strings to a slice of time.Time objects.
//
// # Notes
//
//   - The Expirations field contains dates in string format which should be parsed considering the "America/New_York" timezone.
type OptionsExpirationsResponse struct {
	Expirations []string // Expirations is a slice of strings representing the expiration dates of options.
	Updated     int64    // Updated is a UNIX timestamp indicating when the data was last updated.
}

// IsValid checks the validity of the OptionsExpirationsResponse. This method is primarily used to ensure that the Expirations slice is not empty and that each expiration date string within it can be successfully parsed into a time.Time object according to the "America/New_York" timezone. This validation is crucial for preventing errors in subsequent operations that rely on the integrity of the expiration dates data.
//
// # Returns
//
//   - bool: Indicates whether the OptionsExpirationsResponse is valid. A return value of true means all expiration dates are correctly formatted and the Expirations slice is not empty.
//
// # Notes
//
//   - The parsing of expiration date strings is sensitive to the timezone specified. Incorrect timezone handling may lead to validation errors.
func (oer *OptionsExpirationsResponse) IsValid() bool {
	loc, _ := time.LoadLocation("America/New_York")
	if len(oer.Expirations) == 0 {
		return false
	}
	for _, exp := range oer.Expirations {
		_, err := dates.ToTime(exp, loc)
		if err != nil {
			return false
		}
	}
	return true
}

// String returns a string representation of the OptionsExpirationsResponse. This method is primarily used for logging or debugging purposes, where a human-readable format of the OptionsExpirationsResponse is required. It formats the expirations and the updated timestamp into a readable string.
//
// # Returns
//
//   - string: A string that represents the OptionsExpirationsResponse object.
func (oer *OptionsExpirationsResponse) String() string {
	return fmt.Sprintf("OptionsExpirationsResponse{Expirations: %v, Updated: %d}", oer.Expirations, oer.Updated)
}

// Unpack converts the expiration date strings in the OptionsExpirationsResponse to a slice of time.Time objects, adjusting each to 4:00 PM Eastern Time, the typical expiration time for options contracts. This method is essential for users who need to work with the actual expiration times of options rather than just the dates.
//
// # Returns
//
//   - []time.Time: A slice of time.Time objects representing the expiration dates and times.
//   - error: An error if any date string cannot be parsed or if the "America/New_York" timezone cannot be loaded.
//
// # Notes
//
//   - This method assumes that all expiration times are at 4:00 PM Eastern Time, which may not be accurate for all options contracts.
func (oer *OptionsExpirationsResponse) Unpack() ([]time.Time, error) {
	expirations := make([]time.Time, len(oer.Expirations))
	loc, err := time.LoadLocation("America/New_York")
	if err != nil {
		return nil, err
	}
	for i, exp := range oer.Expirations {
		t, err := dates.ToTime(exp, loc)
		if err != nil {
			return nil, err
		}
		t = t.Add(time.Duration(16) * time.Hour) // Adding 16 hours to the time after parsing. Options expire 4:00 PM Eastern Time.
		expirations[i] = t
	}
	return expirations, nil
}
