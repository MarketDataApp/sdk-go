package models

import (
	"fmt"
	"strings"
	"time"

	"github.com/MarketDataApp/sdk-go/helpers/dates"
)

// StockQuotesResponse encapsulates the data structure for responses received from stock quote requests.
// It contains arrays for various stock attributes such as symbols, prices, volumes, and timestamps.
//
// # Generated By
//
//   - StockQuoteRequest.Packed(): Makes a StoStockQuoteRequest and returns a StockQuotesResponse.
//
// # Methods
//
//   - String(): Returns a string representation of the StockQuotesResponse.
//   - Unpack(): Transforms the StockQuotesResponse into a slice of StockQuote structs.
//
// # Notes
//
//   - The Change, ChangePct, High52, and Low52 fields are pointers to accommodate nil values, indicating that the data may not be applicable or available for some stocks.
type StockQuotesResponse struct {
	Symbol    []string   `json:"symbol"`               // Symbol holds the stock symbols.
	Ask       []float64  `json:"ask"`                  // Ask holds the asking prices for the stocks.
	AskSize   []int64    `json:"askSize"`              // AskSize holds the sizes (quantities) of the asks.
	Bid       []float64  `json:"bid"`                  // Bid holds the bidding prices for the stocks.
	BidSize   []int64    `json:"bidSize"`              // BidSize holds the sizes (quantities) of the bids.
	Mid       []float64  `json:"mid"`                  // Mid holds the mid prices calculated between the ask and bid prices.
	Last      []float64  `json:"last"`                 // Last holds the last traded prices for the stocks.
	Change    []*float64 `json:"change,omitempty"`     // Change holds the price changes, can be nil if not applicable.
	ChangePct []*float64 `json:"changepct,omitempty"`  // ChangePct holds the percentage changes in prices, can be nil if not applicable.
	High52    *[]float64 `json:"52weekHigh,omitempty"` // High52 holds the 52-week high prices, can be nil if not applicable.
	Low52     *[]float64 `json:"52weekLow,omitempty"`  // Low52 holds the 52-week low prices, can be nil if not applicable.
	Volume    []int64    `json:"volume"`               // Volume holds the trading volumes for the stocks.
	Updated   []int64    `json:"updated"`              // Updated holds the UNIX timestamps for when the quotes were last updated.
}

// StockQuote represents a single stock quote, encapsulating various details such as prices, volumes, and timestamps.
//
// # Generated By
//
//   - StockQuotesResponse.Unpack(): Transforms a StockQuotesResponse into a slice of StockQuote structs.
//
// # Methods
//
//   - String(): Generates a string representation of the StockQuote struct.
//
// # Notes
//
//   - The Change, ChangePct, High52, and Low52 fields are pointers to accommodate nil values, indicating that the data may not be applicable or available.
type StockQuote struct {
	Symbol    string    // Symbol is the stock symbol.
	Ask       float64   // Ask is the asking price for the stock.
	AskSize   int64     // AskSize is the size (quantity) of the ask.
	Bid       float64   // Bid is the bidding price for the stock.
	BidSize   int64     // BidSize is the size (quantity) of the bid.
	Mid       float64   // Mid is the mid price calculated between the ask and bid prices.
	Last      float64   // Last is the last traded price for the stock.
	Change    *float64  // Change is the price change, can be nil if not applicable.
	ChangePct *float64  // ChangePct is the percentage change in price, can be nil if not applicable.
	High52    *float64  // High52 is the 52-week high price, can be nil if not applicable.
	Low52     *float64  // Low52 is the 52-week low price, can be nil if not applicable.
	Volume    int64     // Volume is the trading volume for the stock.
	Updated   time.Time // Updated is the time when the quote was last updated.
}

// String generates a string representation of the StockQuote struct, providing a human-readable summary of a stock's details. This method is particularly useful for displaying stock information in a format that is easy to read and understand. It accounts for optional fields by conditionally including High52, Low52, Change, and ChangePct in the output, and formats the updated time to the America/New_York timezone.
//
// # Returns
//
//   - string: A string representation of the StockQuote struct.
//
// # Notes
//
//   - Optional fields (High52, Low52, Change, and ChangePct) are displayed as "nil" if they are not available, ensuring clarity in the output.
//   - The updated time is converted to the America/New_York timezone for consistency in display.
func (sq StockQuote) String() string {
	high52 := "nil"
	if sq.High52 != nil {
		high52 = fmt.Sprintf("%v", *sq.High52)
	}
	low52 := "nil"
	if sq.Low52 != nil {
		low52 = fmt.Sprintf("%v", *sq.Low52)
	}
	change := "nil"
	if sq.Change != nil {
		change = fmt.Sprintf("%v", *sq.Change)
	}
	changePct := "nil"
	if sq.ChangePct != nil {
		changePct = fmt.Sprintf("%v", *sq.ChangePct)
	}
	return fmt.Sprintf("StockQuote{Symbol: %q, Ask: %v, AskSize: %v, Bid: %v, BidSize: %v, Mid: %v, Last: %v, Volume: %v, Updated: %q, High52: %s, Low52: %s, Change: %s, ChangePct: %s}",
		sq.Symbol, sq.Ask, sq.AskSize, sq.Bid, sq.BidSize, sq.Mid, sq.Last, sq.Volume, dates.TimeString(sq.Updated), high52, low52, change, changePct)
}

// Unpack transforms a StockQuotesResponse into a slice of StockQuote structs, effectively unpacking the bulk response into individual stock quotes. This method is primarily used to convert a grouped response of stock quotes into a more accessible format, where each stock quote is represented as a separate struct. It is particularly useful for scenarios where individual stock details need to be accessed or manipulated.
//
// # Returns
//
//   - []StockQuote: A slice of StockQuote structs representing the unpacked stock quotes.
//   - error: An error if any issues occur during the unpacking process. Currently, this implementation always returns nil for error.
//
// # Notes
//
//   - This method handles optional fields such as Change, ChangePct, High52, and Low52 by checking for their existence before assignment, allowing for a flexible unpacking process that accommodates incomplete data.
func (sqr *StockQuotesResponse) Unpack() ([]StockQuote, error) {
	var stockQuotes []StockQuote
	for i := range sqr.Symbol {
		stockQuote := StockQuote{
			Symbol:  sqr.Symbol[i],
			Ask:     sqr.Ask[i],
			AskSize: sqr.AskSize[i],
			Bid:     sqr.Bid[i],
			BidSize: sqr.BidSize[i],
			Mid:     sqr.Mid[i],
			Last:    sqr.Last[i],
			Volume:  sqr.Volume[i],
			Updated: time.Unix(sqr.Updated[i], 0),
		}
		if sqr.Change != nil && len(sqr.Change) > i {
			stockQuote.Change = sqr.Change[i]
		}
		if sqr.ChangePct != nil && len(sqr.ChangePct) > i {
			stockQuote.ChangePct = sqr.ChangePct[i]
		}
		if sqr.High52 != nil && len(*sqr.High52) > i {
			val := (*sqr.High52)[i]
			stockQuote.High52 = &val
		}
		if sqr.Low52 != nil && len(*sqr.Low52) > i {
			val := (*sqr.Low52)[i]
			stockQuote.Low52 = &val
		}
		stockQuotes = append(stockQuotes, stockQuote)
	}
	return stockQuotes, nil
}

// String constructs and returns a string representation of a StockQuotesResponse, encapsulating all relevant details of stock quotes including symbol, ask, bid, mid, last, change, change percentage, 52-week high, 52-week low, volume, and updated time. This method is primarily used for generating a human-readable summary of stock quotes response, which can be useful for logging, debugging, or displaying stock information in a textual format.
//
// # Returns
//
//   - string: A comprehensive, human-readable string representation of the stock quotes response.
//
// # Notes
//
//   - Optional fields such as change, change percentage, 52-week high, and 52-week low are included in the string only if they are available.
func (sqr *StockQuotesResponse) String() string {
	var result strings.Builder

	fmt.Fprintf(&result, "StockQuotesResponse{Symbol: [%v], Ask: [%v], AskSize: [%v], Bid: [%v], BidSize: [%v], Mid: [%v], Last: [%v]",
		strings.Join(sqr.Symbol, ", "), joinFloat64Slice(sqr.Ask), joinInt64Slice(sqr.AskSize), joinFloat64Slice(sqr.Bid), joinInt64Slice(sqr.BidSize), joinFloat64Slice(sqr.Mid), joinFloat64Slice(sqr.Last))

	if sqr.Change != nil && len(sqr.Change) > 0 {
		fmt.Fprintf(&result, ", Change: [%v]", joinFloat64PointerSlice(sqr.Change))
	}
	if sqr.ChangePct != nil && len(sqr.ChangePct) > 0 {
		fmt.Fprintf(&result, ", ChangePct: [%v]", joinFloat64PointerSlice(sqr.ChangePct))
	}
	if sqr.High52 != nil && len(*sqr.High52) > 0 {
		fmt.Fprintf(&result, ", High52: [%v]", joinFloat64Slice(*sqr.High52))
	}
	if sqr.Low52 != nil && len(*sqr.Low52) > 0 {
		fmt.Fprintf(&result, ", Low52: [%v]", joinFloat64Slice(*sqr.Low52))
	}

	fmt.Fprintf(&result, ", Volume: [%v], Updated: [%v]}", joinInt64Slice(sqr.Volume), joinInt64Slice(sqr.Updated))

	return result.String()
}
