package models

import (
	"fmt"
	"strings"
	"time"

	"github.com/MarketDataApp/sdk-go/helpers/dates"
)

// StockNewsResponse encapsulates the data structure for a response containing news articles related to stock symbols.
// It includes arrays for symbols, headlines, content, sources, and publication dates, along with a timestamp for the last update.
//
// # Generated By
//
//   - StockNewsRequest.Packed(): Generates a StockNewsResponse from a request to the /stocks/news endpoint.
//
// # Methods
//
//   - String(): Returns a string representation of the StockNewsResponse.
//   - Unpack(): Transforms the StockNewsResponse into a slice of StockNews structs.
//
// # Notes
//
//   - The PublicationDate field uses UNIX timestamps to represent the publication dates of the news articles.
//   - This struct is primarily used to unpack and process JSON responses from stock news API endpoints.
type StockNewsResponse struct {
	Symbol          []string `json:"symbol"`          // Symbol contains the stock symbols associated with the news.
	Headline        []string `json:"headline"`        // Headline contains the headlines of the news articles.
	Content         []string `json:"content"`         // Content contains the full text content of the news articles.
	Source          []string `json:"source"`          // Source contains the sources from which the news articles were obtained.
	PublicationDate []int64  `json:"publicationDate"` // PublicationDate contains the publication dates of the news articles as UNIX timestamps.
	Updated         int64    `json:"updated"`         // Updated contains the timestamp of the last update to the news data.
}

// StockNews represents a single news article related to a stock, encapsulating details such as the stock symbol, headline, content, source, and publication date.
//
// # Generated By
//
//   - StockNewsResponse.Unpack(): Unpacks the StockNewsResponse into a slice of StockNews.
//
// # Methods
//
//   - String(): Returns a formatted string representation of the StockNews struct.
//
// # Notes
//
//   - The PublicationDate field is of type time.Time, ensuring that the date and time information is accurately represented according to Go's standard time package.
type StockNews struct {
	Symbol          string    // Symbol is the stock symbol associated with the news article.
	Headline        string    // Headline is the headline of the news article.
	Content         string    // Content is the full text content of the news article.
	Source          string    // Source is the source from which the news article was obtained.
	PublicationDate time.Time // PublicationDate is the publication date of the news article.
}

// String() method formats and returns a string representation of the StockNews struct, making it easier to read and understand the news article's details.
// It is particularly useful for logging or displaying the article's information in a human-readable format. If the publication date is at the start of the day,
// it simplifies the date to a YYYY-MM-DD format, omitting time and timezone information for clarity.
//
// # Returns
//
//   - string: A formatted string representation of the StockNews struct.
//
// # Notes
//
//   - If the publication date is exactly at the start of a day (00:00:00), only the date part (YYYY-MM-DD) is included in the output string.
func (sn StockNews) String() string {
	return fmt.Sprintf("StockNews{Symbol: %q, Headline: %q, Content: %q, Source: %q, PublicationDate: %q}",
		sn.Symbol, sn.Headline, sn.Content, sn.Source, dates.TimeString(sn.PublicationDate))
}

// Unpack transforms the StockNewsResponse struct into a slice of StockNews structs, allowing for easy access and manipulation of individual news articles contained within the response. This method is primarily used when one needs to process or display the news articles represented by a StockNewsResponse in a more granular or article-by-article basis.
//
// # Returns
//
//   - []StockNews: A slice of StockNews structs representing the unpacked news articles.
//   - error: An error if any issues occur during the unpacking process. This implementation always returns nil for error.
//
// # Notes
//
//   - This method assumes that the slices within the StockNewsResponse struct are all of equal length, corresponding to the number of news articles contained in the response.
func (snr *StockNewsResponse) Unpack() ([]StockNews, error) {
	var stockNews []StockNews
	for i := range snr.Symbol {
		news := StockNews{
			Symbol:          snr.Symbol[i],
			Headline:        snr.Headline[i],
			Content:         snr.Content[i],
			Source:          snr.Source[i],
			PublicationDate: time.Unix(snr.PublicationDate[i], 0),
		}
		stockNews = append(stockNews, news)
	}
	return stockNews, nil
}

// String generates a string representation of the StockNewsResponse struct, primarily used for logging or debugging purposes. This method iterates over each news article contained within the StockNewsResponse, constructing a formatted string for each article and appending it to a strings.Builder instance. If the 'Updated' field within the struct is non-zero, indicating that the response has been updated, an "Updated" field is also appended to the final string representation. This method is useful for developers who need a quick, readable overview of the news articles contained within a StockNewsResponse, including any updates.
//
// # Returns
//
//   - string: A comprehensive string representation of the StockNewsResponse struct, including details of each news article and any updates.
func (snr *StockNewsResponse) String() string {
	var result strings.Builder

	result.WriteString("StockNewsResponse{")
	for i := range snr.Symbol {
		fmt.Fprintf(&result, "Symbol: %q, Headline: %q, Content: %q, Source: %q, PublicationDate: %v",
			snr.Symbol[i], snr.Headline[i], snr.Content[i], snr.Source[i], snr.PublicationDate[i])

		if i < len(snr.Symbol)-1 {
			result.WriteString("; ")
		}
	}

	if snr.Updated != 0 {
		fmt.Fprintf(&result, ", Updated: %v", snr.Updated)
	}

	result.WriteString("}")
	return result.String()
}
